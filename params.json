{"name":"Spectacles","tagline":"A utility tool for writing BDD specs in Django ","body":"<img src=\"https://badge.fury.io/py/django-spectacles.png\" />\r\n\r\n**Requirements**\r\n\r\n* Django >= 1.6\r\n\r\n**Links:**\r\n\r\n * [Pivotal Tracker Project](https://www.pivotaltracker.com/s/projects/1027510)\r\n * [Home Page (Github Page)](http://toast38coza.github.io/django-spectacles/)\r\n\r\n\r\n# Installation\r\n\r\n**Install via pip:**\r\n\r\n    pip install -U django-spectacles\r\n\r\n---\r\n\r\n# Getting Started \r\n\r\n### 1. Add to installed apps\r\n\r\n**In settings.py:**\r\n\r\n    INSTALLED_APPS = (\r\n        ...\r\n        spectacles,\r\n        ...\r\n    )\r\n    \r\nYou also need to set a value for `TEST_DOMAIN` in `settings.py`. \r\n\r\n\t# this is the default used by Django's test server\r\n\tTEST_DOMAIN = 'http://localhost:8081'\r\n\r\n\r\n\r\n   \r\n### 2. Write your first functional test: \r\n\r\nCreate a file called specs.py \r\n(As a preference, I like to use a naming pattern along the lines of spec_*.py for the modules containing my spec tests). Let's test the Django admin login page. \r\n\r\nIn the folder \r\n\r\n#### First: write what we expect the page to do in plain text:\r\n\r\n    * Go to /admin/\r\n\t* It has an h1 which says: \"Django Administration\"\r\n\t* There is a textbox for username\r\n\t* There is a textbox for password     \r\n\r\nNow let's wrap that into a test: \r\n\r\n\r\n\tfrom spectacles.functionaltest import FunctionalTestCase\r\n\tfrom spectacles.common import DEFAULT_WAIT_TIME, get_absolute_url as u\r\n\tfrom splinter import Browser \r\n\r\n\r\n\tclass HomePageTestCase(FunctionalTestCase):\r\n\r\n   \t\tdef setUp(self):\r\n       \t    self.b = Browser()\r\n\r\n\t    def test_admin_page(self):\r\n\t        \"\"\"\r\n\t\t\t* Go to /admin/\r\n        \t* It has an h1 which says: \"Django Administration\"\r\n        \t* There is a textbox for username\r\n        \t* There is a textbox for password        \r\n\t        \"\"\"\r\n\t        self.assertTrue(False, \"Not yet implemented\")\r\n\t        \r\n\t\tdef tearDown(self):\r\n       \t    self.b.quit()\r\n\r\n**Notes:**\r\n\r\n* We extend `FunctionalTestCase`, not `TestCase`\r\n* `get_absolute_url` handles getting urls using the value you have set for `TEST_DOMAIN`\r\n\r\n#### Finally: write the actual test code:\r\n\r\n**Update `test_admin_page()` so it looks like this:**\r\n\r\n\r\n    def test_admin_page(self):\r\n\t    \"\"\"\r\n\t\t* Go to /admin/\r\n        * It has an h1 which says: \"Django Administration\"\r\n        * There is a textbox for username\r\n        * There is a textbox for password        \r\n\t    \"\"\"\r\n\t \r\n\r\n        self.scenario(\"Testing django-admin login page\")\r\n        self.step(\"Go to admin page\")\r\n        self.b.visit(u(\"/admin/\"))\r\n\r\n        expect = [\r\n            (\"h1\", \"Page heading\"),            \r\n            (\"#id_username\", \"Username text box.\"),            \r\n            (\"#id_password\", \"Password text box.\"),            \r\n        ]\r\n\r\n        self.expect(expect)\r\n\r\n**What this does:**\r\n\r\n* Goes to /admin/\r\n* Tests for an h1 and fields with the ids: id_username and id_password\r\n\r\n**Notes:**\r\n\r\nWe are using `splinter` to wrap our selenium functionality. To see what you can do with splinter's web-drivers check out the docs at: \r\nhttp://splinter.cobrateam.info/docs/\r\n\r\n\r\n### 3. Run your test\r\n\r\nYou can now run your spec tests using:\r\n\r\n    python manage.py test -p spec*.py\r\n    \r\nYou should see feedback something like below: \r\n\r\n<img src=\"http://dropbox.christo.s3.amazonaws.com/spectacles-result.png\" />\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}