{"name":"Spectacles","tagline":"A utility tool for writing BDD specs in Django ","body":"![pip install django-spectacles](https://badge.fury.io/py/django-spectacles.png)\r\n\r\n# Django Spectacles\r\n\r\nWrite **end-to-end** tests in **YAML**, run them with **Python** and output your results in **Markdown**\r\n\r\n# Installation\r\n\r\n    pip install django-spectacles\r\n\r\n### Quickstart\r\n\r\nWe will create a Django project for running our intergration tests. \r\n\r\n\tpython manage.py startproject e2etests .\r\n\r\n### 1. Add to installed apps\r\n\r\n**In settings.py:**\r\n\r\n    INSTALLED_APPS = (\r\n        ...\r\n        spectacles,\r\n        ...\r\n    )\r\n    \r\nYou also need to set a value for `TEST_DOMAIN` in `settings.py`. \r\n\r\n\tTEST_DOMAIN = 'http://google.com'\r\n\r\n**Note:** use 'http://localhost:8081' to use Django's default test server\r\n\t\r\n\r\n\r\n\r\n**Create a test that will run all our yaml test specs:**\r\n\r\nfrom the directory containing `manage.py`: \r\n\r\n\ttouch e2etests/test_e2e.py\r\n\t\r\ntest_e2e.py:\r\n\r\n```\r\nfrom spectacles.functionaltest import FunctionalTestCase\r\nfrom spectacles.yamldriver import YAMLDriver\r\nfrom splinter import Browser \r\n\r\nclass GoogleTestCase(FunctionalTestCase):\r\n\r\n    def setUp(self):\r\n    \t\r\n        self.b = Browser()\r\n        self.yaml_driver = YAMLDriver(self, self.b)\r\n\r\n    def test_google(self):\r\n    \tself.yaml_driver.run_many(\"./e2etests/yaml/spec_*.yml\")\r\n        pass\r\n\r\n    def tearDown(self):\r\n        self.b.quit()\r\n```\r\n\r\n**Notes**\r\n\r\n* TestCase extends `FunctionalTestCase`\r\n* We pass a glob path to find our spec yml files\r\n\r\nYou can now run this with: \r\n\r\n\tpython manage.py test\r\n\t\r\n\r\n##View Results as Markdown\r\n\r\nSpectacles is designed to create output as Markdown. Your test should create the following output:\r\n\r\n```\r\n##I'm feeling lucky\r\n\r\n* Go to url: /\r\n* ✓ Check that search input exists\r\n* ✓ Check that [name='btnI'] exists\r\n* Click button: \r\n* waiting for #archive to load\r\n* ✓ Element has loaded: #archive\r\n \r\n##Google\r\n\r\n* Go to url: /\r\n* ✓ Check that search input exists\r\n* enter Tangent Solutions into field:#lst-ib\r\n* waiting for #ires to load\r\n* ✓ Element has loaded: #ires\r\n```\r\n\r\nWhen parsed it would look like this:\r\n\r\n###I'm feeling lucky\r\n\r\n* Go to url: /\r\n* ✓ Check that search input exists\r\n* ✓ Check that [name='btnI'] exists\r\n* Click button: \r\n* waiting for #archive to load\r\n* ✓ Element has loaded: #archive\r\n \r\n###Google\r\n\r\n* Go to url: /\r\n* ✓ Check that search input exists\r\n* enter Tangent Solutions into field:#lst-ib\r\n* waiting for #ires to load\r\n* ✓ Element has loaded: #ires\r\n\r\n---\r\n**TODO:**\r\n\r\nSome improvements I would like to ship in the near future:\r\n\r\n* Remove dependency on Django\r\n* Print results\r\n* Take arguments (e.g: domain, output directory, glob for yml files)\r\n* Maybe we don't need to run this as a test?\r\n\r\n\r\n**Note to self: deploying to pypi:**\r\n\r\n1. Update version in setup.py\r\n2. Upload to pypi:\r\n\t\t\r\n\t\tpython setup.py sdist upload -r pypi\r\n\t\t\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}